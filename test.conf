// === breaking changes ===
// 1) need batch after extract (could inject that)
// 2)

script {
  schema {}
  settings {
    namespace = "Term.Legacy.Functions"
    //version = "v2"
  }
  tasks {
    read_dbf {
      type = extract
      dataSource {
        type = dbf
        filePath = "/home/maurice/Downloads/dbf/VITEM.DBF"
      }
    }
    filter {
      type = "transformTerm"
      term = "ds => distinct(ds.filter(d => d.GROUP == \"CONSULT\"), \"ITEMNO\")"
    }
    template {
      type = "mergeTemplate"
      templates {
        create = "insert into consult_type (consult_typeid, description) values ('${ITEMNO}', '${sq(DESCPTN)}')"
      }
    }
    update-invoice-db {
      type = "datasourceupdate"
      keyL = "${row.ITEMNO}"
      keyR = "$consult_typeid"
      changeL = "-"
      changeR = "-"
      dataSource {
        type = sql
        connect = "jdbc:postgresql://localhost/gnm_dwh?user=postgres&password=actio"
        query {
          create = "create"
          read = "select consult_typeid FROM consult_type"
        }
      }
    }
    read_db {
      type = extract
      dataSource {
        type = sql
        connect = "jdbc:postgresql://localhost/gnm_dwh?user=postgres&password=actio"
        query {
          read = "select * from public.store"
        }
      }
    }
    my_template {
      type = template
      templates {
        text = "${toUpperCase(name)}"
      }
    }
    my_term {
      type = term
      term = "ds => batch(ds.map(d => d.name + \" \" + toUpperCase(d.name)))"
    }
    read_rest {
      type = extract
      dataSource {
        type = rest
        format = "json"
        credential {
          username = "ops@actio.com.au"
          password = "0p$@@ct10"
        }
        query {
          read {
            uri = "https://stage-api-gnm.actio.com.au/api/store"
          }
        }
      }
    }
    my_lookup {
      type = lookup
      dataSource {
        type = rest
        format = "json"
        credential {
          username = "ops@actio.com.au"
          password = "0p$@@ct10"
        }
        query {
          read {
            uri = "https://stage-api-gnm.actio.com.au/api/store/${id}"
          }
        }
      }
    }
    get_id {
      type = term
      term = """ds => ds.root.data.map(x => ("record", x.id))"""
    }
    flatten {
      type = each
    }
    batch {
      type = batch
      size = 3
    }
    print {
      type = print
      format = json
    }
  }
  pipelines {
    mypipe {
      pipe = "read_dbf | batch | filter | template | update-invoice-db"
    }
  }
  services { }
  startup {
    exec = "mypipe"
  }
}
