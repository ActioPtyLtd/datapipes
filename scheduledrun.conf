
DB_datasource {
  type = "sql"
  jdbcDriver = "org.postgresql.Driver",
  connect = "jdbc:postgresql://localhost/postgres?user=postgres&password=actio"
}

script {
  settings {
    port = 8088
    ssl {
      key-store = "keystore.p12"
      key-store-password = "asdf1234"
      key-store-type = "PKCS12"
    }
    namespace = "actio.datapipes.task.Term.Functions"
    version = "v2"
  }
  tasks {
    getdata {
      type = "transformTerm"
      term = "ds => ds"
    }
    post_schedule_agent {
      type = extract
      dataSource = ${DB_datasource}
      dataSource {
        query {
          read = """
          INSERT INTO public.scheduledrun(
            runid, scheduledrunid, starttime, agentid, config)
          select gen_random_uuid(),gen_random_uuid(),now(),agent_id,get_dependent_config(config_id) || E'\n' || config from agent_run ar
          inner join config c on (ar.config_id=c.id)
          order by ar.id RETURNING runid, scheduledrunid
          """
        }
      }
    }
    get_scheduledrun {
      type = extract
      dataSource = ${DB_datasource}
      dataSource {
        query {
          read = """
          WITH cte2 as (
          WITH cte as ( 
            SELECT runid FROM scheduledrun r
            inner join agent a on (agentId=a.id and a.api_key='${this(0).headers.agentId}')
            WHERE 
              "state" is null AND 
              now() >= starttime 
            ORDER BY r.id ASC LIMIT 1 FOR UPDATE)
            UPDATE  scheduledrun s 
            SET state = 'accepted' 
            FROM cte WHERE s.runid = cte.runid RETURNING s.runid, scheduledrunid, agentid, config)
            select config from cte2
            union all
            select 'runId = "' || runid || E'"\nscheduledRunId = "' || scheduledrunid || '"' || E'\n tenantid = "' || account_id 
            || E'"\nagentId = "' || cte2.agentid || '"'
            from cte2
            inner join agent a on (cte2.agentid = a.id)
          """
        }
      }
    }
    
  }
  pipelines {
    scheduledrun {
      pipe = "getdata | get_scheduledrun"
    }
    schedule_agent {
      pipe = "getdata | post_schedule_agent"
    }
  }
  startup {
    exec = "scheduledrun"
  }
}
