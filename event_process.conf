
event_datasource {
  type = "sql"
  behavior = ""
  jdbcDriver = "org.postgresql.Driver",
  connect = "jdbc:postgresql://localhost/postgres?user=postgres&password=actio"
  query {
    queryTemplate = ""
  }
}

generic_extract {
  type = "extract"
  size = 100
  dataSource = ${event_datasource}
}

script {
  schema {}
  settings {
    namespace = "actio.datapipes.task.Term.Functions"
    version = "v2"
  }
  tasks {
    extract_runs = ${generic_extract}
    extract_runs {
      dataSource {
        query {
          read = "select distinct actio_tenantid as tenantid, actio_runid as runid from datalake.today_event"
        }
      }
    }
    extract_tenants = ${generic_extract}
    extract_tenants {
      dataSource {
        query {
          read = "select distinct split_part(url, '/', 3) as tenantid from public.keypay_info"
        }
      }
    }
    extract_datasources = ${generic_extract}
    extract_datasources {
      dataSource {
        query {
          read = "select distinct tenantid, datasourceid from public.jobschedule"
        }
      }
    }
    extract_scheduledruns = ${generic_extract}
    extract_scheduledruns {
      dataSource {
        query {
          read = "select distinct tenantid as tenantid, jobrunid as scheduledrunid from public.jobschedule"
        }
      }
    }
    extract_pipelines = ${generic_extract}
    extract_pipelines {
      dataSource {
        query {
          read = "select distinct actio_tenantid as tenantid, actio_pipename as pipelineid, actio_pipename as name from datalake.today_event"
        }
      }
    }
    extract_events = ${generic_extract}
    extract_events {
      dataSource {
        query {
          read = """
            select actio_tenantid as tenantid,
              event_id as eventid,event_time::timestamp as eventtime,
              "totalError"::numeric as totalerror,
              "totalErrorSize"::numeric as totalerrorsize,
              "totalProcessed"::numeric as totalprocessed,
              "totalProcessedSize"::numeric as totalprocessedsize,

            coalesce(r.sk,0) as run_sk,
            coalesce(t.sk,0) as tenant_sk,
            coalesce(ds.sk,0) as datasource_sk,
            coalesce(jr.sk,0) as scheduledrun_sk,
            coalesce(p.sk,0) as pipeline_sk,
            0 as eventtype_sk,
            0 as eventdate_sk,
            0 as eventtime_sk,

            message
            from datalake.today_event e
            left outer join ops.tenant t on (e.actio_tenantid = t.tenantid)
            left outer join ops.run r on (e.actio_tenantid = r.tenantid AND e.actio_runid = r.runid)
            left outer join ops.scheduledrun jr on (e.actio_tenantid = jr.tenantid AND e.actio_scheduledrunid::uuid = jr.scheduledrunid)
            left outer join ops.datasource ds on (e.actio_tenantid = ds.tenantid AND jr.datasourceid = ds.datasourceid)
            left outer join ops.pipeline p on (e.actio_tenantid = p.tenantid AND e.actio_pipename = p.pipelineid)
          """
        }
      }
    }
    load_runs {
      type = merge_load
      entity = "ops.run"
      keys = ["tenantid","runid"]
      dataSource = ${event_datasource}
    }
    load_tenants {
      type = merge_load
      entity = "ops.tenant"
      keys = ["tenantid"]
      dataSource = ${event_datasource}
    }
    load_datasources {
      type = merge_load
      entity = "ops.datasource"
      keys = ["datasourceid"]
      dataSource = ${event_datasource}
    }
    load_scheduledruns {
      type = merge_load
      entity = "ops.scheduledrun"
      keys = ["tenantid","scheduledrunid"]
      dataSource = ${event_datasource}
    }
    load_pipelines {
      type = merge_load
      entity = "ops.pipeline"
      keys = ["tenantid","pipelineid"]
      dataSource = ${event_datasource}
    }
    load_events {
      type = merge_load
      entity = "ops.event"
      keys = ["tenantid","eventid"]
      dataSource = ${event_datasource}
    }
  }
  pipelines {
    p_run {
      pipe = "extract_runs | load_runs"
    }
    p_tenant {
      pipe = "extract_tenants | load_tenants"
    }
    p_datasources {
      pipe = "extract_datasources | load_datasources"
    }
    p_scheduledruns {
      pipe = "extract_scheduledruns | load_scheduledruns"
    }
    p_pipelines {
      pipe = "extract_pipelines | load_pipelines"
    }
    p_event {
      pipe = "extract_events | load_events"
    }
  }
  services { }
  startup {
    exec = "p_run"
  }
}
