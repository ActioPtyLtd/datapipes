include "datalake.conf"

run {
  scheduledRunId = "00000000-0000-0000-0000-000000000000"
}

entity_business = business
entity_payrun = payrun
entity_employee = employee

keypay_datasource {
    type = "rest"
    credential {
      user=${apikey}
      password=""
    }
    baseurl = ${url}"/api/v2"
}

script {
  schema {}
  settings {
    namespace = "actio.datapipes.task.Term.Functions"
    version = "v2"
  }
  tasks {
    extract_business {
      type = "lookup"
      dataSource = ${keypay_datasource}
      dataSource {
        query {
          read {
            uri = ${keypay_datasource.baseurl}"/"${entity_business}"/"
          }
        }
      }
    }
    get_list {
      type = transformTerm
      behavior = expand
      term = "this.body"
    }
    load_business {
      type = "stage_load"
      dataSource = ${datalake_datasource}
      dataSource {
        query {
          initialise = "CREATE TABLE IF NOT EXISTS datalake."${entity_business}"(runid uuid, createddate timestamp without time zone DEFAULT now(), configname character varying(100), pipename character varying(100), parameters jsonb, data jsonb, tenantid varchar(30), runstartdate timestamp, scheduledrunid uuid);create index IF NOT EXISTS idx_"${entity_business}"_lastrun on datalake."${entity_business}" (tenantid,createddate desc)"
          create = "insert into datalake."${entity_business}"(runid,configname,pipename,parameters,data,tenantid,runstartdate,scheduledrunid) values ('${run.id}','${run.configName}','${run.pipeName}','${sq(parameters.toJson())}','${sq(array.toJson())}','"${account_id}"','${run.startDate}','${run.scheduledRunId}')"
        }
      }
    }
    read_business {
      type = extract
      size = 1
      dataSource = ${datalake_datasource}
      dataSource {
        query {
          read {
            sql = """SELECT data->>'id' as business_id FROM (
SELECT jsonb_array_elements("data") as data FROM datalake.business
where runid = (
select runid from datalake.business order by runstartdate desc limit 1
)) T"""
          }
        }
      }
    }
    extract_payrun {
      type = "lookup"
      dataSource = ${keypay_datasource}
      dataSource {
        query {
          read {
            uri = ${keypay_datasource.baseurl}"/business/${business_id}/"${entity_payrun}
          }
        }
      }
    }
    add_businessid {
      type = transformTerm
      behavior = expand
      term = "this.body.map(m => m mergeLeft (Record(\"businessId\" -> numeric(this.business_id))))"
    }
    load_payrun {
      type = "stage_load"
      dataSource = ${datalake_datasource}
      dataSource {
        query {
          initialise = "CREATE TABLE IF NOT EXISTS datalake."${entity_payrun}"(runid uuid, createddate timestamp without time zone DEFAULT now(), configname character varying(100), pipename character varying(100), parameters jsonb, data jsonb, tenantid varchar(30), runstartdate timestamp, scheduledrunid uuid);create index IF NOT EXISTS idx_"${entity_payrun}"_lastrun on datalake."${entity_payrun}" (tenantid,createddate desc)"
          create = "insert into datalake."${entity_payrun}"(runid,configname,pipename,parameters,data,tenantid,runstartdate,scheduledrunid) values ('${run.id}','${run.configName}','${run.pipeName}','${sq(parameters.toJson())}','${sq(array.toJson())}','"${account_id}"','${run.startDate}','${run.scheduledRunId}')"
        }
      }
    }
    extract_employee {
      type = "lookup"
      dataSource = ${keypay_datasource}
      dataSource {
        query {
          read {
            uri = ${keypay_datasource.baseurl}"/business/${business_id}/"${entity_employee}
          }
        }
      }
    }
    load_employee {
      type = "stage_load"
      dataSource = ${datalake_datasource}
      dataSource {
        query {
          initialise = "CREATE TABLE IF NOT EXISTS datalake."${entity_employee}"(runid uuid, createddate timestamp without time zone DEFAULT now(), configname character varying(100), pipename character varying(100), parameters jsonb, data jsonb, tenantid varchar(30), runstartdate timestamp, scheduledrunid uuid);create index IF NOT EXISTS idx_"${entity_employee}"_lastrun on datalake."${entity_employee}" (tenantid,createddate desc)"
          create = "insert into datalake."${entity_employee}"(runid,configname,pipename,parameters,data,tenantid,runstartdate,scheduledrunid) values ('${run.id}','${run.configName}','${run.pipeName}','${sq(parameters.toJson())}','${sq(array.toJson())}','"${account_id}"','${run.startDate}','${run.scheduledRunId}')"
        }
      }
    }
    print {
      type = dump
      format = json
    }
  }
  pipelines {
    p_pipe {
      pipe = "p_business & p_payrun & p_employee"
    }
    p_business {
      pipe = "extract_business | get_list | load_business"
    }
    p_payrun {
      pipe = "read_business | extract_payrun | add_businessid | load_payrun"
    }
    p_employee {
      pipe = "read_business | extract_employee | add_businessid | load_employee"
    }
  }
  startup = {
    exec = "p_pipe"
  }
}