
account_datasource {
  type = "sql"
  user="provision"
  password="actioqwe123"
}

flowhub_datasource {
  type = "rest"
  baseuri = "https://flowhub.actio.com.au/api"
}

script {
  schema {}
  settings {
    port = 9901
    namespace = "actio.datapipes.task.Term.Functions"
    version = "v2"
  }
  services = [
    {
      path = "api/v1/datalake"
      get = p_get_entity_list
    },
    {
      path = "api/v1/datalake/$entity/run"
      get = p_get_entity_run_list
    },
    {
      path = "api/v1/datalake/$entity/run/$runid/data"
      get = p_get_entity_run_data
    }
  ]
  tasks {
    get_database_datasources {
      type = lookup
      size = 100
      dataSource = ${flowhub_datasource}
      dataSource {
        query {
          read {
            headers {
              access_token = "${this.headers.access_token}"
            }
            uri = ${flowhub_datasource.baseuri}"/auth/system/database/listAll"
          }
        }
      }
    }
    pick_datalake_datasource {
      type = transformTerm
      term = "this mergeLeft (this.body.find(f => f.name == \"Actio Datalake\"))"
    }
    get_entity_runs {
      type = "extract"
      size = 100
      dataSource = ${account_datasource}
      dataSource {
        query {
          read {
            connect = "jdbc:postgresql://${this.hostname}:${this.port}/${this.database}""?user="${account_datasource.user}"&password="${account_datasource.password}
            sql = """
              select distinct runid,runstartdate,configname,pipename,parameters
              from datalake.${this.variables.entity}
              ${if (this.params.maxrunstartdate.isDefined()) "where runstartdate < '" + this.params.maxrunstartdate + "'" else ""}
              ${if (this.params.orderby.isDefined()) ("order by " + concat(split(this.params.orderby,",").map(o => if(contains(o,"-")) (replaceAll(o,"-","") + " desc") else o + " asc" ),",")) else ""}
              ${if (this.params.pagesize.isDefined()) "limit" else ""} ${this.params.pagesize}
              ${if (this.params.pagenumber.isDefined()) ("offset (" + this.params.pagenumber + "-1)*" + this.params.pagesize) else ""}
              """
          }
        }
      }
    }
    parse_parameters {
      type = transformTerm
      term = "Record(this.runid,this.runstartdate,this.configname,this.pipename,\"parameters\" -> this.parameters.parseJson())"
    }
    get_entity_run_data {
      type = "extract"
      size = 100
      dataSource = ${account_datasource}
      dataSource {
        query {
          read {
            connect = "jdbc:postgresql://${this.hostname}:${this.port}/${this.database}""?user="${account_datasource.user}"&password="${account_datasource.password}
            sql = """
              select * from (
              select jsonb_array_elements(data) as data
              from datalake.${this.variables.entity}
              where runid='${this.variables.runid}'
              ) T

              ${if (this.params.filter(f => f.label() != "entity" && f.label() != "distinct" && f.label() != "fields" && f.label() != "orderby" && f.label() != "pagesize" && f.label() != "pagenumber").size() > 0) "where" else ""}
              ${concat(this.params.filter(f => f.label() != "entity" && f.label() != "distinct" && f.label() != "fields" && f.label() != "orderby" && f.label() != "pagesize" && f.label() != "pagenumber").map(m => "data->>'" + m.label() + "' in ('" + concat(split(m,","),"','") + "')")," AND ")}
              ${if (this.params.orderby.isDefined()) ("order by " + concat(split(this.params.orderby,",").map(o => if(contains(o,"-")) (replaceAll(o,"-","") + " desc") else o + " asc" ),",")) else ""}
              ${if (this.params.pagesize.isDefined()) "limit" else ""} ${this.params.pagesize}
              ${if (this.params.pagenumber.isDefined()) ("offset (" + this.params.pagenumber + "-1)*" + this.params.pagesize) else ""}
              """
          }
        }
      }
    }
    parse_data {
      type = transformTerm
      term = "this.data.parseJson()"
    }
    get_entity_list {
      type = "extract"
      size = 100
      dataSource = ${account_datasource}
      dataSource {
        query {
          read {
            connect = "jdbc:postgresql://${this.hostname}:${this.port}/${this.database}""?user="${account_datasource.user}"&password="${account_datasource.password}
            sql="""select table_name as entity from information_schema.tables
              where (table_schema='datalake' or table_schema='stage') and
              table_name<>'schema_version' and is_insertable_into='YES'"""
          }
        }
      }
    }
    get_entity {
      type = "extract"
      size = 100
      dataSource = ${account_datasource}
      dataSource {
        query {
          read {
            connect = "jdbc:postgresql://${this.hostname}:${this.port}/${this.database}""?user="${account_datasource.user}"&password="${account_datasource.password}
            sql = """
              select ${if (this.params.distinct.isDefined()) this.params.distinct else if(this.params.fields.isDefined()) this.params.fields else "*"}
              from ${this.dbschema}.${this.variables.entity}
              ${if (this.params.filter(f => f.label() != "entity" && f.label() != "distinct" && f.label() != "fields" && f.label() != "orderby" && f.label() != "pagesize" && f.label() != "pagenumber").size() > 0) "where" else ""}
              ${concat(this.params.filter(f => f.label() != "entity" && f.label() != "distinct" && f.label() != "fields" && f.label() != "orderby" && f.label() != "pagesize" && f.label() != "pagenumber").map(m => m.label() + " in ('" + concat(split(m,","),"','") + "')")," AND ")}
              ${if (this.params.orderby.isDefined()) ("order by " + concat(split(this.params.orderby,",").map(o => if(contains(o,"-")) (replaceAll(o,"-","") + " desc") else o + " asc" ),",")) else ""}
              ${if (this.params.pagesize.isDefined()) "limit" else ""} ${this.params.pagesize}
              ${if (this.params.pagenumber.isDefined()) ("offset (" + this.params.pagenumber + "-1)*" + this.params.pagesize) else ""}
              """
          }
        }
      }
    }
    pick_first {
      type = transformTerm
      behavior = batch
      term = "this(0)"
    }
    dothing {
      type = transformTerm
      term = "this"
    }
  }
  pipelines {
    p_get_entity_run_list {
      pipe = "get_database_datasources | pick_datalake_datasource | get_entity_runs | parse_parameters"
    }
    p_get_entity_run_data {
      pipe = "get_database_datasources | pick_datalake_datasource | get_entity_run_data | parse_data"
    }
    p_get_entity_list {
      pipe = "get_database_datasources | pick_datalake_datasource | get_entity_list"
    }
  }

  startup = {
    exec = "p_get_entity_run_list"
  }
}